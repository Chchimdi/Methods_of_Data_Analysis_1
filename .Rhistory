knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(ggplot2)
n <- 500
mu <- 7
x <- 6.2
s <- 40
z <- (x - mu) / sqrt(s/n)
z
qnorm(0.1)
pnorm(z)
2 * (1 - pnorm(abs(z)))
#n <- 500
#mu <- 7
#x <- 6.2
#s <- 40
err <- 1.96
upper_limit <- x + (err * sqrt(s/n))
lower_limit <- x - (err * sqrt(s/n))
upper_limit
lower_limit
data(rivers)
max(rivers)
riversdf <- data.frame(rivers)
ggplot(data = riversdf, aes(rivers)) +
geom_histogram() +
xlab("Length in Miles") +
ggtitle("Length of Major Rivers in North America")
set.seed(411511)
samp1 <- sample(rivers, size=30, replace=FALSE)
mean(samp1)
sampriversdf <- data.frame(samp1)
ggplot(data = sampriversdf, aes(x = samp1)) +
geom_histogram() +
xlab("Length in Miles") +
ggtitle("Length of Major Rivers in North America for Samp1")
z <- (661.9 - 600) / sqrt(var(rivers)/30)
z
2 * (1 - pnorm(abs(z)))
riversdf <- data.frame(rivers)
ggplot(data = riversdf, aes(rivers)) +
geom_histogram() +
xlab("Length in Miles") +
ggtitle("Length of Major Rivers in North America")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(ggplot2)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
View(gpa)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
View(gpadf)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
View(gpadf)
gpadf$grade <- c(4,5,3,5,3,4,3,2,2,4,4,4,56)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
View(gpadf)
gpadf$grade <- c(4,5,3,5,3,4,3,2,2,4,)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
View(gpadf)
gpadf$grade <- c(4,5,3,5,3,4,3,2,2,4,)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
length(gpadf)
gpadf$grade <- c(4,5,3,5,3,4,3,2,2,4,)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
dim(gpadf)
gpadf$grade <- c(4,5,3,5,3,4,3,2,2,4,)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
gpadf$grade <- c(4,5,3,5,3,4,3,2,2,4,)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
gpadf$grade <- C(4,5,3,5,3,4,3,2,2,4,)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
gpadf <- data.frame(gpa)
gpadf$grade <- c(4,5,3,5,3,4,3,2,2,4)
View(gpadf)
# Load the data
data(ex0211)
# Load the data
data(ex0211)
View(ex0211)
# Load the data
data(ex0211)
# Load the data
data(ex0211)
View(ex0211)
# Load the data
data(ex0211)
dfex <- data.frame(ex0211)
# Load the data
data(ex0211)
dfex <- data.frame(ex0211)
# Load the data
data(ex0211)
dfex <- data.frame(data(ex0211)
View(dfex)
# Load the data
data(ex0211)
dfex <- data.frame(data(ex0211)
View(dfex)
# Load the data
data(ex0211)
dfex <- data.frame(data(ex0211))
View(dfex)
# Load the data
data(ex0211)
dfex <- data.frame(data(ex0211))
View(dfex)
# Load the data
data(ex0211)
dim(ex0211)
# Load libraries we need for the assignment
library(ggplot2)
library(Sleuth3)
# Load the data
data(ex0211)
dim(ex0211)
# Load the data
data(ex0211)
dim(ex0211)
# Load the data
data(ex0211)
dim(ex0211)
# Load the data
data(ex0211)
View(ex0211)
# Load the data
data(ex0211)
t.test(Lifetime~Group, data = ex0211, alternative = "two.sided", var.equal = TRUE)
qt(0.95, df = 4)
qnorm(0.95)
gpa <- c(3.1, 3.7, 4.0, 2.7, 2.5, 3.4, 3.5, 3.0, 1.9, 3.4)
xbar <- mean(gpa)
mu <- 3.0
var <- var(gpa)
n <- 10
z <- (xbar - mu) / sqrt(var/n)
z
xbar <- mean(gpa)
mu <- 3.0
var <- var(gpa)
n <- 10
z <- (xbar - mu) / sqrt(var/n)
z
a <- 0.05
cv <- qnorm(1 - a)
cv
xbar <- mean(gpa)
mu <- 3.0
var <- var(gpa)
n <- 10
z <- (xbar - mu) / sqrt(var/n)
sprintf("Z-test= %f", z)
a <- 0.05
cv <- qnorm(1 - a)
sprintf("Critical value= %f", cv)
pv <- 1 - pnorm(z)
sprintf("P-value= %f", pv)
# Compute the standard error
se_gpa <- sqrt(var(gpa) / 10)
# Compute the test statistic
test_stat <- (mean(gpa) - 3.0) / se_gpa
test_stat
# Compute the upper-tail one-sided p-value
1 - pt(test_stat, df = 9)
xbar <- mean(gpa)
mu <- 3.0
var <- var(gpa)
n <- 10
z <- (xbar - mu) / sqrt(var/n)
sprintf("Z-test= %f", z)
a <- 0.05
cv <- qnorm(1 - a)
sprintf("Critical value= %f", cv)
pv <- 1 - pnorm(z)
sprintf("P-value= %f", pv)
sprintf("Fail to reject, the z test is less extreme than the null hypothesis")
# Load the data
data(ex0211)
t.test(Lifetime~Group, data = ex0211, alternative = "two.sided", var.equal = TRUE)
# Load the data
data(ex0211)
# Load the data
data(ex0211)
View(ex0211)
# Load the data
data(ex0211)
View(ex0211)
mx <- mean(ex0211$Lifetime[ex0211$Group == "Control"])
vx <- var(ex0211$Lifetime[ex0211$Group == "Control"])
my <- mean(ex0211$Lifetime[ex0211$Group == "Bacilli"])
mx <- mean(ex0211$Lifetime[ex0211$Group == "Control"])
vx <- var(ex0211$Lifetime[ex0211$Group == "Control"])
my <- mean(ex0211$Lifetime[ex0211$Group == "Bacilli"])
vy <- var(ex0211$Lifetime[ex0211$Group == "Bacilli"])
mx <- mean(ex0211$Lifetime[ex0211$Group == "Control"])
vx <- var(ex0211$Lifetime[ex0211$Group == "Control"])
my <- mean(ex0211$Lifetime[ex0211$Group == "Bacilli"])
vy <- var(ex0211$Lifetime[ex0211$Group == "Bacilli"])
length(ex0211$Lifetime[ex0211$Group == "Control"])
mx <- mean(ex0211$Lifetime[ex0211$Group == "Control"])
vx <- var(ex0211$Lifetime[ex0211$Group == "Control"])
my <- mean(ex0211$Lifetime[ex0211$Group == "Bacilli"])
vy <- var(ex0211$Lifetime[ex0211$Group == "Bacilli"])
length(ex0211$Lifetime[ex0211$Group == "Control"])
length(ex0211$Lifetime[ex0211$Group == "Bacilli"])
mx <- mean(ex0211$Lifetime[ex0211$Group == "Control"])
mx
vx <- var(ex0211$Lifetime[ex0211$Group == "Control"])
vx
my <- mean(ex0211$Lifetime[ex0211$Group == "Bacilli"])
my
vy <- var(ex0211$Lifetime[ex0211$Group == "Bacilli"])
vy
nx <- length(ex0211$Lifetime[ex0211$Group == "Control"])
ny <- length(ex0211$Lifetime[ex0211$Group == "Bacilli"])
pv <- ((nx - 1) * vx + (ny - 1)*vy) / (nx + ny - 2)
nx <- length(ex0211$Lifetime[ex0211$Group == "Control"])
ny <- length(ex0211$Lifetime[ex0211$Group == "Bacilli"])
pv <- ((nx - 1) * vx + (ny - 1)*vy) / (nx + ny - 2)
pv
t <- (mx - my) - 0 / sqrt((vx/nx) + (vy/ny))
t <- (mx - my) - 0 / sqrt((vx/nx) + (vy/ny))
t <- (mx - my) - 0 / sqrt((vx/nx) + (vy/ny))
t
t_stat <- ((mx-my) - 0) / sqrt(sp2 * (1 / m + 1 / n))
t_stat <- ((mx-my) - 0) / sqrt(sp2 * (1 / m + 1 / n))
t <- ((mx - my) - 0) / sqrt((vx/nx) + (vy/ny))
t
a <- 0.01
n <- 122
cv <- qt(1 - a, n - 1)
cv
pv <- 1 - pt(t, n - 1)
pv
data(ex0221)
data(ex0221)
View(ex0221)
data(ex0221)
ms <- mean(ex0221$Humerus[ex0221$Status == "Survivied"])
vs <- var(ex0221$Humerus[ex0221$Status == "Survivied"])
mp <- mean(ex0221$Humerus[ex0221$Status == "Perished"])
vp <- var(ex0221$Humerus[ex0221$Status == "Perished"])
data(ex0221)
Survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
Perished <- ex0221$Humerus[ex0221$Status == "Perished"]
data(ex0221)
Survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
Perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(Survived, Perished, data = ex0221, var.equal = TRUE, paired = FALSE, alternative = "two.sided")
data(ex0221)
Survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
Perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(Survived, Perished, data = ex0221, var.equal = TRUE, paired = FALSE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, paired = FALSE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, paired = FALSE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, data = ex0221, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, var.equal = TRUE, alternative = "two.sided")
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(survived, perished, alternative = "two.sided", var.equal = TRUE)
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survivied"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, alternative = "two.sided", var.equal = TRUE)
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, alternative = "two.sided", var.equal = TRUE)
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, data = ex0221, alternative = "two.sided", var.equal = TRUE)
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, data = ex0221, alternative = "two.sided", var.equal = TRUE)
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, data = ex0221, paired = FALSE, alternative = "two.sided", var.equal = TRUE)
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, data = ex0221, paired = FALSE, alternative = "two.sided", var.equal = TRUE, conf.level = 0.95)
t.test(Humerus~Status, data = ex0221, paired = FALSE, alternative = "two.sided", var.equal = TRUE, conf.level = 0.95)
rats <- data.frame(rat=factor(rep(1:15, 2))
rats <- data.frame(rat=factor(rep(1:15, 2)),
day=rep(c("Day1", "Day30")), each=10
mazetime=c()
sample <- c(13, 10, 2, 8, 23, 13, 7, 1, 21, 15, 6, 11, 5, 14, 15)
sample <- c(13, 10, 2, 8, 23, 13, 7, 1, 21, 15, 6, 11, 5, 14, 15)
mean(sample)
paired <- read.csv(/Users/chikezic/Downloads/paired-t-test.csv)
paired <- read.csv(Users/chikezic/Downloads/paired-t-test.csv)
paired <- read.csv(https://researchguides.library.vanderbilt.edu/ld.php?content_id=19429111)
paired <- read.csv(https://researchguides.library.vanderbilt.edu/ld.php?content_id=19429111)
paired <- read.csv("https://researchguides.library.vanderbilt.edu/ld.php?content_id=19429111")
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
View(paired)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages we will use in this lab
library(ggplot2)
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$group[paired$no_malonate] - paired$group[paired$no_malonate]
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$group[paired$no_malonate] - paired$group[paired$malonate]
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$no_malonate[paired$group] - paired$malonate[paired$group]
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$no_malonate[paired$group] - paired$malonate[paired$group]
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$no_malonate[paired$group] - paired$malonate[paired$group]
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$no_malonate[paired$group] - paired$malonate[paired$group]
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$no_malonate[paired$group] - paired$malonate[paired$group]
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$no_malonate[paired$group] - paired$malonate[paired$group]
mean(paired$sample)
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
paired$sample <- paired$no_malonate[paired$group] - paired$malonate[paired$group]
View(paired)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(ggplot2)
data(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, data = ex0221, paired = FALSE, alternative = "two.sided", var.equal = TRUE, conf.level = 0.95)
data(ex0221)
View(exo221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, data = ex0221, paired = FALSE, alternative = "two.sided", var.equal = TRUE, conf.level = 0.95)
data(ex0221)
View(ex0221)
survived <- ex0221$Humerus[ex0221$Status == "Survived"]
perished <- ex0221$Humerus[ex0221$Status == "Perished"]
t.test(perished, survived, data = ex0221, paired = FALSE, alternative = "two.sided", var.equal = TRUE, conf.level = 0.95)
paired <- read.csv("/Users/chikezic/Downloads/paired-t-test.csv")
w <- 4,5,6,7,3,4,10
w <- 4,5,6,7,3,4,10
w <- c(4,5,6,7,3,4,10)
x <- mean(w)
y <- log(w)
z <- mean(y)
w <- c(4,5,6,7,3,4,10)
x <- mean(w)
x
y <- log(w)
y
z <- mean(y)
z
w <- c(4,5,6,7,3,4,10)
x <- mean(w)
x
y <- log(w)
z <- mean(y)
z
w <- c(4,5,6,7,3,4,10)
z <- log(w)
log(median(w))
median(z)
case0301
case0301
View(case0301)
case0301
case0301$Rainfall <- log(case0301$Rainfall)
case0301
case0301$lRainfall <- log(case0301$Rainfall)
case0301
case0301$lRainfall <- log(case0301$Rainfall)
case0301
case0301$lRainfall <- log(case0301$Rainfall)
ggplot(case0301, aes(x = Rainfall)) + geom_histogram(color = "white") + facet_wrap(~Treatment, ncol = 1)
case0301
case0301$lRainfall <- log(case0301$Rainfall)
ggplot(case0301, aes(x = Rainfall)) + geom_histogram(color = "white", bins = 30) + facet_wrap(~Treatment, ncol = 1)
